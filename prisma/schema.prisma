// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    ExcerciseGroup ExcerciseGroup[]
    GymPlan        GymPlan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GymPlan {
    id          String           @id @default(cuid())
    name        String
    description String           @default("")
    owner       User             @relation(fields: [ownerId], references: [id])
    ownerId     String
    excercises  ExcerciseGroup[]
}

model ExcerciseGroup {
    id          String          @id @default(cuid())
    name        String
    description String
    owner       User            @relation(fields: [ownerId], references: [id])
    ownerId     String
    GymPlan     GymPlan[]
    items       ExcesriceItem[]
}

model ExcesriceItem {
    id               String         @id @default(cuid())
    name             String
    description      String         @default("")
    excerciseGroupId String
    excerciseGroup   ExcerciseGroup @relation(fields: [excerciseGroupId], references: [id])
    ItemFields       ItemFields[]
}

model ItemFields {
    id              String        @id @default(cuid())
    label           String
    value           String
    excerciseItemId String
    excerciseItem   ExcesriceItem @relation(fields: [excerciseItemId], references: [id])
}

model EmailAudit {
    id          String    @id @default(cuid())
    sentAt      DateTime  @default(now())
    type        EmailType
    sentTo      String
    sentBy      String?
    subject     String
    body        String?
    status      String
    jsonRespone String?
}

enum EmailType {
    PLAN
    BUG
}
